# ================================================================
# BGScript demo: Health Thermometer collector demo (BLE master)
# http://www.bluegiga.com/support
# ----------------------------------------------------------------
#
# CHANGELOG:
#   2013-06-20 - Fix "address_type" to support random (e.g. iOS)
#   2013-05-09 - Initial release
#
# ================================================================

# ================================================================
# BASIC ARCHITECTURAL OVERVIEW:
#     The program starts, initializes the dongle to a known state, then starts
#     scanning. Each time an advertisement packet is found, a scan response
#     event packet is generated. These packets are read by polling the serial
#     port to which the BLE(D)11x is attached.
# 
#     The basic process is as follows:
#       a. Scan for devices
#       b. If the desired UUID is found in an ad packet, connect to that device
#       c. Search for all "service" descriptors to find the target service handle range
#       d. Search through the target service to find the thermometer measurement attribute handle
#       e. Enable indications on the thermometer measurement attribute
#       f. Read and display incoming thermometer values until terminated/disconnected
# 
# FUNCTION ANALYSIS:
# 
# 1. system_boot:
#     Sets scan parameters and initiates a scan with the "gap_discover" command.
# 
# 2. gap_scan_response:
#     Raised during scanning whenever an advertisement packet is detected. The
#     data provided includes the MAC address, RSSI, and ad packet data payload.
#     This payload includes fields which contain any services being advertised,
#     which allows us to scan for a specific service. In this demo, the service
#     we are searching for has a standard 16-bit UUID which is contained in the
#     "uuid_htm_service" variable. Once a match is found, the script initiates
#     a connection request with the "gap_connect_direct" command.
# 
# 3. connection_status
#     Raised when the connection status is updated. This happens when the
#     connection is first established, and the "flags" byte will contain 0x05 in
#     this instance. However, it will also happen if the connected devices bond
#     (i.e. pair), or if encryption is enabled (e.g. with "sm_encrypt_start").
#     Once a connection is established, the script begins a service discovery
#     with the "attclient_read_by_group_type" command.
# 
# 4. attclient_group_found
#     Raised for each group found during the search started in #3. If the right
#     service is found (matched by UUID), then its start/end handle values are
#     stored for usage later. We cannot use them immediately because the ongoing
#     read-by-group-type procedure must finish first.
# 
# 5. attclient_find_information_found
#     Raised for each attribute found during the search started after the service
#     search completes. We look for two specific attributes during this process;
#     the first is the unique health thermometer measurement attribute which has
#     a standard 16-bit UUID (contained in the "uuid_htm_measurement_characteristic"
#     variable), and the second is the corresponding "client characteristic
#     configuration" attribute with a UUID of 0x2902. The correct attribute here
#     will always be the first 0x2902 attribute after the measurement attribute
#     in question. Typically the CCC handle value will be either +1 or +2 from
#     the original handle.
# 
# 6. attclient_procedure_completed
#     Raised when an attribute client procedure finishes, which in this script
#     means when the "attclient_read_by_group_type" (service search) or the
#     "attclient_find_information" (descriptor search) completes. Since both
#     processes terminate with this same event, we must keep track of the state
#     so we know which one has actually just finished. The completion of the
#     service search will (assuming the service is found) trigger the start of
#     the descriptor search, and the completion of the descriptor search will
#     (assuming the attributes are found) trigger enabling indications on the
#     measurement characteristic.
# 
# 7. attclient_attribute_value
#     Raised each time the remote device pushes new data via notifications or
#     indications. (Notifications and indications are basically the same, except
#     that indications are acknowledged while notifications are not--like TCP vs.
#     UDP.) In this script, the remote slave device pushes temperature
#     measurements out as indications approximately once per second. These values
#     are displayed out UART1/Alt1 @ 115200,8/N/1 without flow control.
# 
# ================================================================

const STATE_STANDBY = 0
const STATE_SCANNING = 1
const STATE_CONNECTING = 2
const STATE_FINDING_SERVICES = 3
const STATE_FINDING_ATTRIBUTES = 4
const STATE_LISTENING_MEASUREMENTS = 5

dim state                       # current application state
dim att_handlesearch_start      # "start" handle holder during search
dim att_handlesearch_end        # "end" handle holder during search
dim att_handle_measurement      # temperature measurement attribute handle
dim att_handle_measurement_ccc  # temp. meas. client characteristic config handle

dim i   # overall ad data position index
dim j   # individual ad field position index
dim ad_field_length
dim ad_field_type

dim htm_flags
dim htm_exponent
dim htm_mantissa
dim htm_measurement
dim string(4)

event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)
    # initialize state
    state = STATE_STANDBY
    call system_endpoint_tx(system_endpoint_uart1, 30, "\r\nHTM Collector Demo started\r\n")

    # configure scanning (125ms interval, 125ms window, passive)
    call gap_set_scan_parameters($c8, $c8, 0)
    
    # start scanning at boot (generic discovery)
    call gap_discover(gap_discover_generic)
    
    # change state (I know, kinda pointless to have the one up above)
    state = STATE_SCANNING
    call system_endpoint_tx(system_endpoint_uart1, 13, "Scanning...\r\n")
end

event gap_scan_response(rssi, packet_type, sender, address_type, bond, data_len, data_data)
    # advertisement packet found during scan, so check for Health Thermometer service
    i = 0
    while i < data_len
        ad_field_length = data_data(i:1)
        ad_field_type = data_data(i + 1:1)
        if ad_field_type = $02 || ad_field_type = $03 then
            # partial ($02) or complete ($03) list of 16-bit UUIDs
            # search for 0x1809
            j = 0
            while j < ad_field_length
                if data_data(i + j + 2:1) = $09 && data_data(i + j + 3:1) = $18 then
                    # found Health Thermometer service in ad packet, so connect
                    # (32ms/48ms min/max interval, 1000ms timeout, 0 latency)
                    call gap_connect_direct(sender(0:6), address_type, $20, $30, $100, 0)
                    
                    # change state
                    state = STATE_CONNECTING
                    call system_endpoint_tx(system_endpoint_uart1, 15, "Connecting...\r\n")

                    # set loop counters to 100 so we'll stop looking
                    # (there is no "break" function in BGScript)
                    i = 100
                    j = 100
                end if
                j = j + 2
            end while
        end if
        i = i + ad_field_length + 1
    end while
end

event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    if (flags & $05) = $05 then
        # connection established
        call system_endpoint_tx(system_endpoint_uart1, 12, "Connected!\r\n")
        
        # start searching through service groups (UUID = 0x2800) to find Health Thermometer service
        call attclient_read_by_group_type(connection, $0001, $ffff, 2, "\x00\x28")

        # change state
        state = STATE_FINDING_SERVICES
        call system_endpoint_tx(system_endpoint_uart1, 21, "Finding services...\r\n")
    end if
end

event attclient_group_found(connection, start_handle, end_handle, uuid_len, uuid_data)
    # found a service group, so check to see if it's the Health Thermometer service (0x1809)
    if uuid_len = 2 && uuid_data(0:1) = $09 && uuid_data(1:1) = $18 then
        # found it! save the handle range
        att_handlesearch_start = start_handle
        att_handlesearch_end = end_handle
        call system_endpoint_tx(system_endpoint_uart1, 16, "Found service!\r\n")
    end if
end

event attclient_find_information_found(connection, chrhandle, uuid_len, uuid_data)
    # found a descriptor, so check to see if it's the the measurement one (0x2A1C) or following CCC (0x2902)
    if uuid_len = 2 && uuid_data(0:1) = $1C && uuid_data(1:1) = $2A then
        # found the measurement attribute, so save the handle
        att_handle_measurement = chrhandle
        call system_endpoint_tx(system_endpoint_uart1, 27, "Found measurement handle!\r\n")
    end if
    if uuid_len = 2 && uuid_data(0:1) = $02 && uuid_data(1:1) = $29 && att_handle_measurement > 0 && att_handle_measurement_ccc = 0 then
        # found client characteristic configuration for measurement attr, so save the handle
        att_handle_measurement_ccc = chrhandle
        call system_endpoint_tx(system_endpoint_uart1, 31, "Found measurement CCC handle!\r\n")
    end if
end

event attclient_procedure_completed(connection, result, chrhandle)
    # finished some attclient operation, so figure out what happened
    if state = STATE_FINDING_SERVICES then
        if att_handlesearch_end > 0 then
            # change state
            state = STATE_FINDING_ATTRIBUTES
            call system_endpoint_tx(system_endpoint_uart1, 23, "Finding attributes...\r\n")

            # found Health Thermometer service, so now find the measurement + CCC handles
            call attclient_find_information(0, att_handlesearch_start, att_handlesearch_end)
        else
            # couldn't locate service with UUID 0x1809, uh oh
            call system_endpoint_tx(system_endpoint_uart1, 24, "Couldn't find service!\r\n")
        end if
    end if
    if state = STATE_FINDING_ATTRIBUTES && chrhandle > att_handlesearch_start then
        if att_handle_measurement_ccc > 0 then
            # change state
            state = STATE_LISTENING_MEASUREMENTS
            call system_endpoint_tx(system_endpoint_uart1, 26, "Awaiting measurements...\r\n")

            # found everything, yay! now enable indications (write 0x02 to CCC handle)
            call attclient_attribute_write(0, att_handle_measurement_ccc, 1, $02)
        else
            # couldn't locate temperature measurement characteristic with UUID 0x2A1C, uh oh
            # (or possibly the corresponding client characteristic configuration attribute)
            call system_endpoint_tx(system_endpoint_uart1, 31, "Couldn't find characteristic!\r\n")
        end if
    end if
end

event attclient_attribute_value(connection, atthandle, type, value_len, value_data)
    # received a pushed value from the slave
    if atthandle = att_handle_measurement then
        # new temperature measurement value
        call system_endpoint_tx(system_endpoint_uart1, 13, "Temperature: ")
        
        # get temperature data
        htm_flags = value_data(0:1)
        htm_exponent = value_data(4:1)
        htm_mantissa = (value_data(3:1) << 16) | (value_data(2:1) << 8) | value_data(1:1)
        htm_measurement = htm_mantissa
        
        # exponent is now a signed 8-bit value in a signed 32-bit container, so fix it if necessary
        if htm_exponent > $7f then
            htm_exponent = htm_exponent - 256
        end if
        
        # adjust mantissa as required if exponent > 1 (more likely -1)
        while htm_exponent > 1
            htm_measurement = htm_measurement / 10
            htm_exponent = htm_exponent - 1
        end while
        
        # create string representation of measurement value
        # (BGScript only has ints, so we make due with manually adding a '.')
        string(0:1) = (htm_measurement / 100) + 48
        string(1:1) = (htm_measurement / 10) + (htm_measurement / -100 * 10) + 48
        string(2:1) = $2e # '.'
        string(3:1) = htm_measurement + (htm_measurement / 10 * -10) + 48
        
        # display string representation
        call system_endpoint_tx(system_endpoint_uart1, 4, string(0:4))
        
        # display temperature type
        if (htm_flags & 1) = 1 then
            call system_endpoint_tx(system_endpoint_uart1, 3, "\xF8 F")
        else
            call system_endpoint_tx(system_endpoint_uart1, 3, "\xF8 C")
        end if
        call system_endpoint_tx(system_endpoint_uart1, 2, "\r\n")
    end if
end

event connection_disconnected(handle, result)
    # connection disconnected, start scanning again
    call system_endpoint_tx(system_endpoint_uart1, 15, "Disconnected!\r\n")
    call gap_discover(gap_discover_generic)
    
    # change state
    state = STATE_SCANNING
    call system_endpoint_tx(system_endpoint_uart1, 13, "Scanning...\r\n")
end